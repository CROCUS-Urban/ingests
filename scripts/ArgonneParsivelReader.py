import numpy as np

from datetime import datetime, timedelta
from pydsd.DropSizeDistribution import DropSizeDistribution

record_format = {"13": 6, "21": 10, "20": 8, "18": 1, "25": 3, "17": 4, "16": 4, 
                 "27": 3, "28": 3, "12": 3, "01": 8, "02": 7, "07": 6,
                 "11": 5, "60": 8, "90": 223, "91": 223, "93": 4095}

def read_adm_parsivel(filename):
    """
    Takes a filename pointing to an Argonne parsivel raw file and returns
    a drop size distribution object.

    Usage:
    dsd = read_parsivel(filename)

    Returns:
    DropSizeDistrometer object

    """
    reader = ArgonneParsivelReader(filename)
    dsd = DropSizeDistribution(reader)
    return dsd


def var_to_dict(standard_name, data, units, long_name):
    """
    Convert variable information to a dictionary.
    """
    d = {}
    d["data"] = data[:]
    d["units"] = units
    d["long_name"] = long_name
    d["standard_name"] = standard_name
    return d

class ArgonneParsivelReader(object):
    """
    ParsivelReader class takes takes a filename as it's only argument(for now).
    This should be a parsivel raw datafile(output from the parsivel).

    """

    def __init__(self, filename):
        self.filename = filename
        self.rain_rate = []
        self.Z = []
        self.num_particles = []
        self._base_time = []

        self.nd = []
        self.vd = []
        self.raw = []
        self.code = []
        self.time = []

        self.ndt = []

        self.pcm = np.reshape(self.pcm_matrix, (32, 32))

        self._read_file()
        self._prep_data()

        self.bin_edges = np.hstack(
            (0, self.diameter["data"] + np.array(self.spread["data"]) / 2)
        )

        self.bin_edges = var_to_dict(
            "bin_edges", self.bin_edges, "mm", "Bin Edges"
        )

        self._apply_pcm_matrix()
    
    def _read_file(self):
        with open(self.filename) as f:
            for file_line in f:
                if file_line == "":
                    continue
                pos = 0
                key_no = 0
                
                while pos < len(file_line) - 1:
                    code = list(record_format.keys())[key_no]
                    num_chars = record_format[code]
                    data = file_line[pos:pos+num_chars]
                    pos = pos + num_chars + 1
                    key_no = key_no + 1
                    
                    if code == "01":  # Rain Rate
                        self.rain_rate.append(float(data))
                    elif code == "07":  # Reflectivity
                        self.Z.append(float(data))
                    elif code == "11":  # Num Particles
                        self.num_particles.append(int(data))
                    elif code == "20":  # Time string
                        self.time.append(self.get_sec(data.split(":")))
                    elif code == "21":  # Date string
                        date_tuple = data.split(".")
                        self._base_time.append(
                            datetime(
                                year=int(date_tuple[2]),
                                month=int(date_tuple[1]),
                                day=int(date_tuple[0]),
                            )
                        )
                    elif code == "90":  # Nd
                        self.nd.append(
                            np.power(10, list(map(float, data.split(";"))))
                        )
                    elif code == "91":  # Vd
                        self.vd.append(
                            list(map(float, data.split(";")))
                        )
                    elif code == "93":  # md
                        self.raw.append(list(map(int, data.split(";"))))

    def get_sec(self, s):
        return int(s[0]) * 3600 + int(s[1]) * 60 + int(s[2])
    
    def _apply_pcm_matrix(self):
        """ Apply Data Quality matrix from Ali Tokay
        Returns: None

        """
        self.filtered_raw_matrix = np.ndarray(
            shape=(len(self.raw), 32, 32), dtype=float
        )
        for i in range(len(self.raw)):
            self.filtered_raw_matrix[i] = np.multiply(
                self.pcm, np.reshape(self.raw[i], (32, 32))
            )

    def _prep_data(self):
        self.fields = {}

        self.fields["rain_rate"] = var_to_dict(
            "Rain rate", np.ma.array(self.rain_rate), "mm/h", "Rain rate"
        )
        self.fields["reflectivity"] = var_to_dict(
            "Reflectivity",
            np.ma.masked_equal(self.Z, -9.999),
            "dBZ",
            "Equivalent reflectivity factor",
        )
        self.fields["Nd"] = var_to_dict(
            "Nd",
            np.ma.masked_equal(self.nd, np.power(10, -9.999)),
            "m^-3 mm^-1",
            "Liquid water particle concentration",
        )
        self.fields["Nd"]["data"].set_fill_value(0)

        self.fields["num_particles"] = var_to_dict(
            "Number of Particles",
            np.ma.array(self.num_particles),
            "",
            "Number of particles",
        )
        self.fields["terminal_velocity"] = var_to_dict(
            "Terminal Fall Velocity",
            np.array(
                self.vd[0]
            ),  # Should we do something different here? Don't think we want the time series.
            "m/s",
            "Terminal fall velocity for each bin",
        )

        try:
            self.time = self._get_epoch_time()
        except:
            self.time = {
                "data": np.array(self.time, dtype=float),
                "units": None,
                "title": "Time",
                "full_name": "Native file time",
            }
            print("Conversion to Epoch Time did not work.")  

    def _get_epoch_time(self):
        """
        Convert the time to an Epoch time using package standard.
        """
        time_unaware = np.array(
            [
                self._base_time[i] + timedelta(seconds=self.time[i])
                for i in range(0, len(self.time))
            ]
        )
        epoch = datetime.utcfromtimestamp(0)
        time_secs = [(timestamp - epoch).total_seconds() for timestamp in time_unaware]

        eptime = {
            "data": time_secs,
            "units": "seconds since 1970-1-1 00:00:00+0:00",
            "title": "Time",
            "long_name": "time",
        }
        return eptime

    diameter = var_to_dict(
        "diameter",
        np.array(
            [
                0.06,
                0.19,
                0.32,
                0.45,
                0.58,
                0.71,
                0.84,
                0.96,
                1.09,
                1.22,
                1.42,
                1.67,
                1.93,
                2.19,
                2.45,
                2.83,
                3.35,
                3.86,
                4.38,
                4.89,
                5.66,
                6.7,
                7.72,
                8.76,
                9.78,
                11.33,
                13.39,
                15.45,
                17.51,
                19.57,
                22.15,
                25.24,
            ]
        ),
        "mm",
        "Particle diameter of bins",
    )

    spread = var_to_dict(
        "spread",
        [
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.257,
            0.257,
            0.257,
            0.257,
            0.257,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            1.030,
            1.030,
            1.030,
            1.030,
            1.030,
            2.060,
            2.060,
            2.060,
            2.060,
            2.060,
            3.090,
            3.090,
        ],
        "mm",
        "Bin size spread of bins",
    )

    velocity = var_to_dict(
        "velocity",
        np.array(
            [
                0.05,
                0.15,
                0.25,
                0.35,
                0.45,
                0.55,
                0.65,
                0.75,
                0.85,
                0.95,
                1.1,
                1.3,
                1.5,
                1.7,
                1.9,
                2.2,
                2.6,
                3,
                3.4,
                3.8,
                4.4,
                5.2,
                6.0,
                6.8,
                7.6,
                8.8,
                10.4,
                12.0,
                13.6,
                15.2,
                17.6,
                20.8,
            ]
        ),
        "m s^-1",
        "Terminal fall velocity for each bin",
    )

    v_spread = [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        1.6,
        1.6,
        1.6,
        1.6,
        1.6,
        3.2,
        3.2,
    ]

    pcm_matrix = (
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    )  